
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]
  preference    Preference[]
  workflow      Workflow[]
  @@unique([email])
  @@map("user")
}
model Preference {
    id        String   @id
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    key       String
    value     String
    createdAt DateTime
    updatedAt DateTime

    @@unique([userId, key])
    @@map("preference")
}
model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime 
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Workflow {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name        String
  description String
  definition  String
  status      String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  executions WorkflowExecution[]

  @@unique([name, userId])
  @@map("workflow")
}

model WorkflowExecution {
  id            String @id @default(cuid())
  workflowId    String
  userId        String
  trigger       String
  status        String
  createdAt     DateTime @default(now())
  startedAt     DateTime?
  completedAt   DateTime?

  phases        ExecutionPhase[]
  workflow      Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

}

model ExecutionPhase{
  id            String @id @default(cuid())
  userId        String
  status        String
  number        Int
  node          String
  name          String
  startedAt     DateTime?
  completedAt   DateTime?
  inputs        String?
  outputs       String?

  creditsCost         Int?
  workflowExecutionId String
  execution          WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
} 
